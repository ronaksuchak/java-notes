Hashing alogorithm in java
HashSet
LinkedHashSet n TreeSet (ano inner class)
----------------------------
Revise 
Sorting in Java
1. Natural Ordering
1.1 UDT (Collection type) MUST imple : java.lang.Comparable<T> T : Customer
1.2 public int compareTo(Customer c) {...} --- -1 / 0 /1 : String's compareTo : sorting criteria
1.3 Collections.sort(List<T> list)
T : MUST be Comparable<T>
eg : Collections.sort(customerList) : Tim Sort ---Customer's compareTo

2. Custom ordering
2.1 Separate class : MUST imple :java,uti.Comparator<T>
T : type of object to be comapared (UDT or Collection type)
eg : public class CustomerDoBComparator imple Comparator<Customer>{...}
2.2 public int compare(T o1,T o2)
eg : return c1.getDob().compareTo(c2.getDob());

2.3 Collections.sort(customerList,new CustomerDoBComparator ());
Tim Sort  : CustomerDoBComparator 's compare


HashSet
HashSet<String> hs=new HS<>();
hs.add("one");
hs.add("two");
hs.add("four");
hs.add("one");
sop(hs.size());

eg : HashSet<Customer> hs=new HS<>();
hs.add(new Customer("abc@gmail.com",.....));//c1
hs.add(new Customer("abc@gmail.com",.....));//c2
hs.add(new Customer("abc2@gmail.com",.....));//c3
sop(hs.size());
1. identify PK : override equals
2. override public int hashCode () : Object class method : int rep of address
Contract : Equal objects MUST produce SAME hash codes

public int hashCode () : return 100;
OPtional (RECO) : Un Equal objects SHOULD produce DIFFERENT hash codes


public LinkedHashSet(Collection<E> c)
E : Emp
This constr creates populated LHS populated from 
AL , LL ,Vector
HS,LHS , TS
HM , LHM , TM  --- javac error


Objective : 
Store BankAccount details in HashSet .
Display bank account info sorted as per acct nos.(Natural ordering)
Display bank account info sorted as per creation date , type (Custom ordering) / ano inner class

Objective
Anonymous inner class : nameless inner class (entire class def is embedded in single java stmt)
Display bank account info sorted as per creation date , type (Custom ordering) using  ano inner class

TreeSet<BankAccount> accts=new TreeSet<>(new Comparator<BankAccount>()
{//start of inner 
 @Override
  public int compare(BA a1,BA a2)
  {....}
}//end of inner
);

new Comparator<BankAccount>() => instance of a cls that imple Comparator i/f 





