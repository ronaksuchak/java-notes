Enter streams....

They are introduced in Java 8.
Stream API (package java.util.stream)  is used to process collections of objects(references). 

What is it ?
A stream represents  sequence of operations(via API : eg filter ,map ,reduce)   which can be pipelined to produce the desired result.

Why : To ease big data operations n enable functional programming n chaining of multiple operations.

The features of Java stream are –

A stream is not a data structure BUT it takes input from the Collections, Arrays or I/O channels.

Streams don’t change the original data structure, they only provide the result as per the pipelined methods.

Each intermediate operation is lazily executed and returns a stream as a result, hence various intermediate operations can be pipelined. 

Terminal operations mark the end of the stream and return the result.

Different Operations On Streams-

Intermediate Operations:

eg : 
map: The map method is used to returns a stream consisting of the results of applying the given function to the elements of this stream.
List number = Arrays.asList(2,3,4,5);
List square = number.stream().map(x->x*x).collect(Collectors.toList());

filter: The filter method is used to select elements as per the Predicate passed as argument.
List names = Arrays.asList("Reflection","Collection","Stream");
List result = names.stream().filter(s->s.startsWith("S")).collect(Collectors.toList());

sorted: The sorted method is used to sort the stream.
List names = Arrays.asList("Reflection","Collection","Stream");
List result = names.stream().sorted().collect(Collectors.toList());

Terminal Operations:

collect: The collect method is used to return the result of the intermediate operations performed on the stream.
List number = Arrays.asList(2,3,4,5,3);
Set square = number.stream().map(x->x*x).collect(Collectors.toSet());

forEach: The forEach method is used to iterate through every element of the stream.
List number = Arrays.asList(2,3,4,5);
number.stream().map(x->x*x).forEach(y->System.out.println(y));

reduce: The reduce method is used to reduce the elements of a stream to a single value.

The reduce method takes a BinaryOperator as a parameter.
List number = Arrays.asList(2,3,4,5);
int even = number.stream().filter(x->x%2==0).reduce(0,(ans,i)-> ans+i);




1. How to create stream of ints from array?
java.util.Arrays class method
public static IntStream stream(int[] array)
Returns a sequential IntStream with the specified array as its source.

2. How to create stream(sequential) from Collection ?
Collection i/f method
public Stream<E> stream()

3.How to create stream(parallel) from Collection ?
Collection i/f method
public Stream<E> parallelStream()


IntStream Methods

1. public void forEach(IntConsumer action)
Performs an action for each element of this stream.

Solve : 
1.Create int[] ---> IntStream & display its contents.
2. Create AL<Integer> , populate it.
Convert it to seq stream & display elems
Convert it to parallel stream & display elems
3. Create stream of ints between 1-100 & display all even elements.
(Hint : IntStream methods --range,filter,forEach)

4. Display all product names of a particular category , exceeding specific price.
I/P category name & price.
(stream,filter,forEach)
eg : productList : List<Product>


5. Display sum of all even nos between 1-100 .

6. Display sum of product prices of a specific category.
I/P category name
o/p sum.
--------------------

4.Create IntStream having ints in the range of 10...50
& Print its sum.(specialized reduction operation)
Hint( rangeClosed , sum)

5.Print avg of 10-50 numbers(if strm is empty print -100 or else print avg)
(rangeClosed,average & optional)

6.Print avg of odd numbers between 10 & 50
(filter,average,optional)

7.Print avg of square of odd nums between 10 & 50 
(filter,map,reduce)

8. Use var-args based method "of" to generate IntStream.
Find min & max values.
Print sorted (asc) ints.

8.5 Accept 10 numbers from user & add them to IntStream
Print if all the numbers are > 20.

9. Create Fruit class , with 1 instance var name.
Add constr & toString
Add a abstract taste() method to ret String form of taste.
Create sub classes --Mango,Cherry,Apple,Banana.
Use Arrays.asList --to create fixed size list of Fruits (mango --sweet
,cherry sweet
apple --sour
,banana --sweet)
Convert List to Stream & filter fruits having sweet taste &
Display their names.


8.1 Create Student class -- rollNo(string),name,dob(LocalDate),subject(enum),gpa(double)
Create Subject enum --JAVA,CLOUD,ML,R,DBT
Add constr & to string & getters.
8.2 Create CollectionUtils ---to ret populated FIXED size list of students (4 records)
8.3 Write a tester to print avg gpa of students opted for subject JAVA
(Hint : filter,map,reduce)
8.4 Print name of java topper
(filter reduce -- max )
8.5 Check if there are any failures for the specified subject from user.
(gpa < 5 : failed case)
(filter,anyMatch)

8.6 Display Names of failures in Java
filter,findAny

8.7 How many distinctions for a specific subject
(gpa > 7.5 : distinction)
filter,count


8.8 Create a separate class Address(not a nested class)
--city,state,phoneNo
Add a method in Student class to assign student's address.
Modify CollectionUtils , to assign address to all the students.

8.9 Display distinct city names of student address.
Later part , collect them in a Set.
(map,distinct,collect)



Important Facts :
1. Streams are implicitely closed , after terminal operation (i.e they can't be re used after terminal operation) 
Otherwise throws --IllegalStateException (reason :stream has already been operated upon or closed)
Where as , collections are re-usable.

2. Streams follow , vertical execution order.

3. Streams support lazy evaluation (meaning none of the intermediate operations are performed , until its closed by terminal operation)



