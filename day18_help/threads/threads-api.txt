Thread related API

Starting point 
1. java.lang.Runnable --functional i/f
SAM -- public void run()
Prog MUST override run() -- to supply thread exec. logic.

2. java.lang.Thread --class -- imple . Runnable
It has imple. run() -- blank manner.

3. Constrs of Thread class in "extends" scenarion
3.1 Thread() -- Creates a new un-named thrd.
3.2 Thread(String name) -- Creates a new named thrd.

4. Constrs of Thread class in "implements" scneario
4.1 Thread(Runnable instance) -- Creates a new un-named thrd.
4.2 Thread(Runnable instance,String name) -- Creates a new named thrd.

Methods of Thread class
1. public void start() -- To cause transition from NEW -- RUNNABLE
throws IllegalThreadStateException -- if thrd is alrdy runnable or dead. 
2. public static void yield() -- Requests the underlying native scheduler to release CPU & enters rdy pool.
Use case -- co operative multi tasking(to allow lesser prio thrds to access processor)

3. public void setName(String nm)
4. public String getName()
5. Priority scale -- 1---10
Thread class consts --MIN_PRIO=1 , MAX_PRIO=10 , NORM_PRIO =5
public void setPriority(int prio)
6. public static Thread currentThread() -- rets invoker(current) thrd ref.
7. public String toString() -- Overrides Object class method , to ret
Thread name,priority,name of thrd grp.
8.public static void sleep(long ms) throws InterruptedException



9. public void join()  throws InterruptedException
--Causes the invoker thread to block till specified thread gets over.
eg : t1 & t2 
t1's  run()
{
 .....
 t2.join();//who is waiting for whom for which purpose ? : t1 is waiting for t2 : to complete exec
....
}

t2's run()
{
   //some B.L :read data from file
}
join method can be used effectively to avoid orphan threads
main has to wait for child thrds to complete exec
How ? 
In main(..)
t1.join();
t2.join();


10  public void join(long ms)  throws InterruptedException
--Causes the invoker thread to block till specified thread gets over OR tmout elapsed
11. public void interrupt() -- interrupts(un blocks ) the threads blocked on ---sleep/join/wait









 