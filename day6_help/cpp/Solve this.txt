#include <iostream>
using namespace std; 
class Base
{
protected:
    int i;
public:
    Base(int a) { i = a; }
    virtual void display()
    { cout << "I am Base class object, i = " << i << endl; }
}; 
class Derived : public Base
{
    int j;
public:
    Derived(int a, int b) : Base(a) { j = b; }
    virtual void display()
    { 
        cout << "I am Derived class object, i = "<< i << ", j = " << j << endl;  
     }
}; 

void print_object(Base obj)
{
    obj.display();
} 
int main()
{
    Base a(1);
    Derived b(2, 3);
    print_object(a);
    print_object(b);  
    return 0;
}
What wil be o/p?
?????????????????




Consider the following code:


#include <iostream>
using namespace std; 
class Base
{
    protected:
        int i;
    public:
        Base(int a) { i = a; }
        virtual void display()
        { 
            cout << "I am Base class object, i = " << i << endl; 
         }
}; 
class Derived : public Base
{
    int j;
public:
    Derived(int a, int b) : Base(a) { j = b; }
    virtual void display()
    { 
        cout << "I am Derived class object, i = " << i << ", j = " << j << endl;  
      }
}; 

void print_object(Base &obj)
{
    obj.display();
} 
int main()
{
    Base a(1);
    Derived b(2, 3);
    print_object(a);
    print_object(b);  
    return 0;
}

What will be o/p?










Point to take home :
 "Object slicing doesnâ€™t occur when pointers or references to objects are passed as function arguments"






